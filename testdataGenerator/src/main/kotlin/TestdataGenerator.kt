package de.uni_muenster.imi.oegd.testdataGenerator
import mu.KotlinLogging
import org.redundent.kotlin.xml.Node
import org.redundent.kotlin.xml.xml
import java.io.File
import java.time.LocalDate
import java.time.LocalDateTime
import kotlin.random.Random

private val log = KotlinLogging.logger {  }

class TestdataGenerator {
    private var startTimeRange = LocalDate.of(2021, 1, 1)
    private var endTimeRange = LocalDate.of(2022, 2, 28)

    companion object {
        @JvmStatic
        fun main(args: Array<String>) {
            fun askUser(message: String): String {
                println(message)
                return readLine()!!
            }

            if (!File("testdata").exists()) {
                File("testdata").mkdir()
            }

            val patients = TestdataGenerator().createTestdata(Integer.parseInt(askUser("How many patients should be generated?")))
            patients.forEachIndexed { index, patient ->
                File("testdata/Patient$index").writeText(patient)
            }
        }
    }


    fun setStartYear(year: String) {
        startTimeRange = LocalDate.of(year.toInt(), 1, 1)
    }

    fun setEndYear(year: String) {
        endTimeRange = LocalDate.of(year.toInt(), 1, 1).minusDays(1)
    }

    fun getStartAndEndYear(): CaseDate {
        return generateStartAndEnddate(startTimeRange, endTimeRange)
    }

    fun createTestdataFile(patientNumber: Int, location: String) {
        val caseScope = CaseScope.values().random()
        File("$location/Patient$patientNumber").writeText(createPatient(caseScope))
    }

    fun createTestdata(numberOfTestdata: Int): List<String> {
        val result = mutableListOf<String>()
        for (i in 1..numberOfTestdata) {
            val caseScope = CaseScope.values().random()
            result.add(createPatient(caseScope))
            log.info("Created new Patient with $caseScope case. Patient no. $i")
        }
        return result
    }

    fun createPatient(caseScope: CaseScope): String {
        val caseInfo = CaseInfo(caseScope, this)
        val patient = xml("patient") {
            attribute("birthYear", "${Random.nextInt(1940, 2010)}")
            attribute("sex", "${if (Random.nextBoolean()) 'F' else 'M'}")
            attribute("id", "${caseInfo.patientId}")
            addCase(caseInfo)
        }
        return patient.toString(true)
    }

    fun Node.addCase(caseInfo: CaseInfo) {
        addNode(xml("case") {
            attribute("id", "${caseInfo.caseId}")
            attribute("from", "${caseInfo.startDateTime}")
            attribute("till", "${caseInfo.endDateTime}")
            attribute("type", Casetype.STATIONAER.type)
            //TODO: Add AdmissionCause and state
            "location" {
                attribute("id", "${caseInfo.locationId}")
                attribute("from", "${caseInfo.startDateTime}")
                attribute("till", "${caseInfo.endDateTime}")
                attribute("clinic", caseInfo.clinic.fa_code)
            }
            "labReport" {
                attribute("id", "${caseInfo.labReportId}")
                attribute("source", "MIBI")
                "request" {
                    attribute("from", "${caseInfo.requestDateTime}")
                    attribute("sender", caseInfo.clinic.clinic)
                }
                "sample" {
                    attribute("from", "${caseInfo.requestDateTime}")
                    attribute("bodySiteDisplay", caseInfo.bodySite.bodySiteDisplay)
                    attribute("display", caseInfo.bodySite.display)
                    "comment" {
                        -"No comment"
                    }
                    "germ" {
                        attribute("id", "${caseInfo.germId}")
                        attribute("SNOMED", caseInfo.germType.SNOMED)
                        attribute("display", caseInfo.germType.display)
                        attribute("class", caseInfo.caseScope.type)
                        "comment"{
                            attribute("class", caseInfo.caseScope.type) //TODO: Currently xquery searches for this
                            -"Germ generated by Testdata Generator"
                        }
                        if (caseInfo.caseScope == CaseScope.MRSA) {
                            addPCRMetaNode("PatientID", "${caseInfo.patientId}")
                            addPCRMetaNode("CaseID", "${caseInfo.caseId}")
                            addPCRMetaNode("SampleID", "${caseInfo.sampleId}")
                            addPCRMetaNode("CollectionDate", "${caseInfo.startDateTime}")
                            addPCRMetaNode("Spa", "${caseInfo.spaType?.type}")
                            addPCRMetaNode("ClusterType", "${caseInfo.clusterType}")
                        }


                        for (antibioticAnalysis in generateAntibioticsAnalysis(caseInfo)) {
                            "antibiotic" {
                                attribute("LOINC", antibioticAnalysis.antibiotic.LOINC)
                                attribute("display", antibioticAnalysis.antibiotic.display)
                                "result" {
                                    attribute("string", antibioticAnalysis.antibioticsResult.result)
                                    attribute("LOINC", antibioticAnalysis.antibioticsResult.LOINC)
                                }
                            }
                        }
                    }
                }
            }
            if (caseInfo.caseScope == CaseScope.MRSA) {
                "hygiene-message" {
                    attribute("germ-name", caseInfo.germType.display)
                    attribute("nosocomial", "${caseInfo.nosocomial}")
                    attribute("infection", "${caseInfo.infection}")
                    attribute("MRG-class", "${caseInfo.caseScope}")
                }
            }
        })
    }


    fun Node.addPCRMetaNode(k: String, v: String) {
        addNode(xml("pcr-meta") {
            attribute("k", k)
            attribute("v", v)
        })
    }

}

data class CaseInfo(val caseScope: CaseScope, val generator: TestdataGenerator) {
    val patientId: Int = idGenerator.getUniqueId()
    val caseId: Int = idGenerator.getUniqueId()
    val locationId: Int = idGenerator.getUniqueId()
    val labReportId: Int = idGenerator.getUniqueId()
    val sampleId: Int = idGenerator.getUniqueId()
    val germId: Int = idGenerator.getUniqueId()

    val clinic: Department = Department.values().random()
    val bodySite: SmearType = SmearType.values().random()

    private val startAndEndDateTime: CaseDate = generator.getStartAndEndYear()
    val startDateTime: LocalDateTime = startAndEndDateTime.startTimeDate
    val endDateTime: LocalDateTime = startAndEndDateTime.endDateTime
    val requestDateTime: LocalDateTime = startDateTime.plusDays(1) //Request always one day after start

    var germType: GermType
    var spaType: SpaType? = null
    var clusterType: ClusterType? = null
    var nosocomial: Boolean? = null
    var infection: Boolean? = null

    init {
        when (caseScope) {
            CaseScope.MRSA -> {
                germType = GermType.S_AUREUS
                spaType = getRandomTypeWithProbability(SpaType.values().toList())!! as SpaType
                clusterType = getRandomTypeWithProbability(ClusterType.values().toList())!! as ClusterType
                nosocomial = Random.nextBoolean()
                infection = Random.nextBoolean()
            }
            CaseScope.MRGN3, CaseScope.MRGN4 -> {
                germType = getMRGNGermTypes().random()
            }
            CaseScope.VRE -> {
                germType = getVREGermTypes().random()
            }
        }
    }
}


