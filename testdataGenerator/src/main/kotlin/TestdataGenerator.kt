package de.uni_muenster.imi.oegd.testdataGenerator
import org.redundent.kotlin.xml.Node
import org.redundent.kotlin.xml.xml
import java.io.File
import java.time.LocalDate
import java.time.LocalDateTime
import java.time.LocalTime
import java.util.concurrent.ThreadLocalRandom
import kotlin.random.Random


class TestdataGenerator {
    companion object {
        @JvmStatic
        fun main(args: Array<String>) {
            fun askUser(message: String): String {
                println(message)
                return readLine()!!
            }

            if (!File("testdata").exists()) {
                File("testdata").mkdir()
            }

            for (i in 1..Integer.parseInt(askUser("How many patients should be generated?"))) {
                val result = createPatient()
                File("testdata/Patient$i").writeText(result)
            }
        }
    }
}

private val unusedIds = (1000000..99999999).toMutableList()
private val startTimeRange = LocalDate.of(2021,1,1)
private val endTimeRange = LocalDate.of(2022,2,28)



fun createTestdata(numberOfTestdata: Int): List<String> {
    val result = mutableListOf<String>()
    for(i in 1..numberOfTestdata) {
        result.add(createPatient())
    }
    return result
}

fun createPatient(): String {
    val caseInfo = CaseInfo(CaseScope.MRSA) //TODO: Implement Random selection
    val patient = xml("patient") {
        attribute("birthYear", "${Random.nextInt(1940, 2010)}")
        attribute("sex", "${if (Random.nextBoolean()) 'F' else 'M'}")
        attribute("id", "${caseInfo.patientId}")
        addCase(caseInfo)
    }
    return patient.toString(true)
}

fun Node.addCase(caseInfo: CaseInfo){
    addNode(xml("case") {
        attribute("id", "${caseInfo.caseId}")
        attribute("from", "${caseInfo.startDateTime}")
        attribute("till", "${caseInfo.endDateTime}")
        attribute("type", "${Casetype.STATIONAER}") //TODO Andere Casetypes?
        //TODO: Add AdmissionCause and state
        "location" {
            attribute("id", "${caseInfo.locationId}")
            attribute("from", "${caseInfo.startDateTime}")
            attribute("till", "${caseInfo.endDateTime}")
            attribute("clinic", caseInfo.clinic.fa_code)
        }
        "labReport" {
            attribute("id", "${caseInfo.labReportId}")
            attribute("source", "MIBI")
            "request" {
                attribute("from", "${caseInfo.requestDateTime}")
                attribute("sender", caseInfo.clinic.clinic)
            }
            "sample" {
                attribute("from", "${caseInfo.requestDateTime}")
                attribute("bodySiteDisplay", caseInfo.bodySite.bodySiteDisplay)
                attribute("display", caseInfo.bodySite.display)
                "comment" {
                    -"No comment"
                }
                "germ" {
                    attribute("id", "${caseInfo.germId}")
                    attribute("SNOMED", caseInfo.germType.SNOMED)
                    attribute("display", caseInfo.germType.display)
                    attribute("class", caseInfo.caseType.type)
                    "comment"{
                        attribute("class", caseInfo.caseType.type) //TODO: Currently xquery searches for this
                        -"Germ generated by Testdata Generator"
                    }
                    when(caseInfo.caseType) {
                        CaseScope.MRSA -> {
                            addPCRMetaNode("PatientID", "${caseInfo.patientId}")
                            addPCRMetaNode("CaseID", "${caseInfo.caseId}")
                            addPCRMetaNode("SampleID", "${caseInfo.sampleId}")
                            addPCRMetaNode("CollectionDate", "${caseInfo.startDateTime}")
                            addPCRMetaNode("Spa", "${caseInfo.spaType?.type}")
                            //TODO: <pcr-meta k="ST" v=""/>
                            addPCRMetaNode("ClusterType", "${caseInfo.clusterType}")
                        }
                    }


                    for(antibioticAnalysis in generateRandomAntibioticsAnalysis(caseInfo.antibiotics)) {
                        "antibiotic" {
                            attribute("LOINC", antibioticAnalysis.antibiotic.LOINC)
                            attribute("display", antibioticAnalysis.antibiotic.display)
                            "result" {
                                attribute("string", antibioticAnalysis.antibioticsResult.result)
                                attribute("LOINC", antibioticAnalysis.antibioticsResult.LOINC)
                            }
                        }
                    }
                }
            }
        }
        "hygiene-message" {
            attribute("germ-name", caseInfo.germType.display)
            attribute("germ-number", "1") //TODO Logik dahinter?
            attribute("nosocomial", "${caseInfo.nosocomial}")
            attribute("infection", "${caseInfo.infection}")
            attribute("MRG-class", "${caseInfo.caseType}")
        }
    })
}


data class CaseInfo(val caseType: CaseScope) {
    val patientId: Int = getUniqueId()
    val caseId: Int = getUniqueId()
    val locationId: Int = getUniqueId()
    val labReportId: Int = getUniqueId()
    val sampleId: Int = getUniqueId()
    val germId: Int = getUniqueId()
    val clinic: Department = Department.values().random()

    private val startAndEndDateTime : Pair<LocalDateTime, LocalDateTime> = generateStartAndEnddate()
    val startDateTime: LocalDateTime = startAndEndDateTime.first
    val endDateTime: LocalDateTime = startAndEndDateTime.second
    val requestDateTime = startDateTime.plusDays(1) //Request always one day after start

    val bodySite: SmearType = SmearType.values().random()

    lateinit var germType: GermType
    lateinit var antibiotics: List<AntibioticType>
    var spaType: SpaType? = null
    var clusterType: ClusterType? = null
    var nosocomial: Boolean? = null
    var infection: Boolean? = null
    init {

       when (caseType) {
           CaseScope.MRSA -> {
               germType = GermType.S_AUREUS
               antibiotics = getMRSAAntibiotics()
               spaType = getRandomTypeWithProbability(SpaType.values().toList())!! as SpaType
               clusterType = getRandomTypeWithProbability(ClusterType.values().toList())!! as ClusterType
               nosocomial = Random.nextBoolean() //TODO: Logic?
               infection = Random.nextBoolean()
           }
           CaseScope.MRGN3 -> {
               //TODO
           }
           CaseScope.MRGN4 -> {
               //TODO
           }
           CaseScope.VRE -> {
               //TODO
           }
       }
    }
}

fun Node.addPCRMetaNode(k: String, v: String) {
    addNode(xml("pcr-meta") {
        attribute("k", k)
        attribute("v", v)
    })
}

private fun generateStartAndEnddate(): Pair<LocalDateTime, LocalDateTime> {
    val startEpochDay = startTimeRange.toEpochDay()
    val endEpochDay = endTimeRange.toEpochDay()
    val randomStartDay = LocalDate.ofEpochDay(
        ThreadLocalRandom
            .current()
            .nextLong(startEpochDay, endEpochDay)
    )
    val randomEndDay = randomStartDay
        .plusWeeks(Random.nextLong(1, 4))
        .plusDays(Random.nextLong(0, 6))

    val randomStartTime = LocalTime.of(Random.nextInt(1, 24),
                                        Random.nextInt(1, 60),
                                        Random.nextInt(1, 60))

    val randomEndTime = LocalTime.of(Random.nextInt(1, 24),
        Random.nextInt(1, 60),
        Random.nextInt(1, 60))

    val startDateTime = LocalDateTime.of(randomStartDay, randomStartTime)
    val endDateTime = LocalDateTime.of(randomEndDay, randomEndTime)

    return Pair(startDateTime, endDateTime)
}

private fun getUniqueId(): Int {
    val id = unusedIds.random()
    unusedIds.remove(id)
    return id
}

//TODO: Antibiogram Logic needs more work
private fun generateRandomAntibioticsAnalysis(antibiotics: List<AntibioticType>): List<AntibioticsAnalysis> {
    val result: MutableList<AntibioticsAnalysis> = mutableListOf()

    for(antibiotic in antibiotics) {
        val randomResult = AntibioticsResult.values().random()
        result.add(AntibioticsAnalysis(antibiotic, randomResult))
    }
    return result
}

private fun getMRSAAntibiotics(): List<AntibioticType> {
    return listOf(
        AntibioticType.AMOXICILLIN_CLAVULANSAEURE, AntibioticType.AMPICILLIN_SULBACTAM,
        AntibioticType.AZITHROMYCIN, AntibioticType.BENZYLPENICILLIN,
        AntibioticType.CEFACLOR, AntibioticType.CEFAZOLIN,
        AntibioticType.CEFOXITIN, AntibioticType.CLARITHROMYCIN,
        AntibioticType.CLINDAMYCIN, AntibioticType.DAPTOMYCIN,
        AntibioticType.ERYTHROMYCIN, AntibioticType.FOSFOMYCIN,
        AntibioticType.FUSIDINSAEURE, AntibioticType.GENTAMICIN,
        AntibioticType.IMIPENEM, AntibioticType.INDUCED_CLINDAMYCIN,
        AntibioticType.LEVOFLOXACIN, AntibioticType.LINEZOLID,
        AntibioticType.MEROPENEM, AntibioticType.MUPIROCIN,
        AntibioticType.OXACILLIN, AntibioticType.PIPERACILLIN,
        AntibioticType.PIPERACILLIN_TAZOBACTAM, AntibioticType.RIFAMPICIN,
        AntibioticType.TEICOPLANIN, AntibioticType.TETRACYCLIN,
        AntibioticType.TIGECYCLIN, AntibioticType.TRIMETHOPRIM_SULFAMETHOXAZOL,
        AntibioticType.VANCOMYCIN
    )
}

private fun getRandomTypeWithProbability(typeList: List<ProbabilityEnum>):ProbabilityEnum? {
    val p = Random.nextDouble(0.0, 1.0)
    var cumulativeProbability = 0.0

    for(type in typeList) {
        cumulativeProbability += type.relativeProbability
        if(p <= cumulativeProbability) {
            return type
        }
    }
    return null //Should never be reached
}


